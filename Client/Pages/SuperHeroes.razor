@page "/superheroes"
@inject ISuperHeroService SuperHeroService
@inject NavigationManager NavigationManager
@implements IDisposable

<h3>Super Heroes</h3>
<!--so let use a table to dispay our surper hereos-->
if (SuperHeroService.Heroes.Count == 0)
{
    <span>Loading Super Heroes....</span>
}
else{
    <table class="table">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Hero Name</th>
                <th>Comic</th>
                <th></th>
                <th></th>
            <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach(var hero in SuperHeroService.Heroes)
            {
                <tr>
                    <td>@hero.FirstName</td>
                    <td>@hero.LastName</td>
                    <td>@hero.HeroName</td>
                    <td>@hero.Comic.Name</td>
                    <td>
                        <button class="btn btn-primary" @onclick="(() => ShowHero(hero.Id))">Show</button>
                    </td>
                <td>
                    <button class="btn btn-primary" @onclick="(() => EditHero(hero.Id))">Edit</button>
                </td>
                <td>
                    <button class="btn btn-primary" @onclick="(() => DeleteHero(hero.Id))">Delete</button>
                </td>
                </tr>
            }
        </tbody>
    </table>
}
<EditSuberHero Hero = "heroToEdit"> </EditSuberHero>

@code {
    SuperDB.Shared.SuperHero heroToEdit = new SuperDB.Shared.SuperHero();
    //List<SuperDB.Shared.SuperHero> heroes = new List<SuperDB.Shared.SuperHero>();
    protected override async Task OnParametersSetAsync()
    {

        await SuperHeroService.GetSuperHeros();
        SuperHeroService.OnChange += StateHasChanged;

    }
    void ShowHero(int id)
    {
        NavigationManager.NavigateTo($"superhero/{id}");
    }
    void EditHero(int id)
    {
        heroToEdit = SuperHeroService.Heroes.Find(h => h.Id == id);
    }
    void DeleteHero(int id)
    {
        SuperHeroService.DeleteSuperHero(id);
    }
    public void Dispose()
    {
        SuperHeroService.OnChange -= StateHasChanged;
    }
}

<!--so line 1"page "/superheroes" so this is our page directive, also in line 2 we called our "SuperHeroService" through dependency injection 
so in line 6 we called the SuperHeroService by using a life cycle method 
-->
