@inject ISuperHeroService SuperHeroService
@inject IJSRuntime JSRuntime

@if (Hero.Id == 0)
{
    <h3>Create a new Hero</h3>
}
else
{
<h3>Edit '@Hero.HeroName'</h3>
}



@*<h3>EditSuperHero</h3>*@

<EditForm Model=" Hero" OnSubmit= "HandleSubmit">
    <div class=" form-group">
        <label>First Name</label>
    <InputText @bind-Value="Hero.FirstName" class="form-control"></InputText>
    </div>
      <div class=" form-group">
        <label>Last Name</label>
    <InputText @bind-Value="Hero.LastName" class="form-control"></InputText>
    </div>
      <div class=" form-group">
            <label>Hero Name</label>
    <InputText @bind-Value="Hero.HeroName" class="form-control"></InputText>
    </div>
    <div class=" form-group">
        <label>comic</label><br />
           <InputRadioGroup @bind-Value="comicId" class="form-control">
               @foreach(var comic in SuperHeroService.Comics)
               {
                   <InputRadio Value="@comic.Id" /><span style="padding-left: 5px;">@comic.Name</span><br />
               }
               </InputRadioGroup>
               </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code {
    //[Parameter]
    //public SuperDB.Shared.SuperHero HeroToEdit { get; set; }

    [Parameter]
    public SuperDB.Shared.SuperHero Hero { get; set; } = new SuperDB.Shared.SuperHero();
    int comicId = 1;

    protected override async Task OnInitializedAsync()
    {
        await SuperHeroService.GetComics();
        comicId = Hero.Comic.Id;

    }
    async void HandleSubmit()
    {
        Hero.Comic = SuperHeroService.Comics.FirstOrDefault(c => c.Id == comicId);

        await SuperHeroService.CreateSuperHero(Hero);

        if (Hero.Id == 0)
        {
            await SuperHeroService.CreateSuperHero(Hero);
        }
        else
        {
            await SuperHeroService.UpdateSuperHero(Hero, Hero.Id);
        }
        await JSRuntime.InvokeVoidAsync("console.log", Hero);
        
    }

}
